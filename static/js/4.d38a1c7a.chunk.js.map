{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/myPosts/Post/Post.module.css","components/Profile/myPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/myPosts/Post/Post.tsx","components/Profile/myPosts/TextareaPostForm.tsx","components/Profile/myPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","status","statusText","setStatusText","editMode","setEditMode","useEffect","type","value","autoFocus","onChange","e","currentTarget","onBlur","updateProfileStatus","onDoubleClick","title","connect","state","profile","isFetch","isFetching","profileStatusText","className","s","profileBlock","Preloader","descriptionBlock","item","itemCase","avaAndStatus","avatar","src","photos","large","userIcon","alt","fullName","aboutMe","jobBlock","lookingForAJob","lookingForAJobDescription","contactsBlock","contacts","facebook","instagram","github","mainLink","twitter","vk","website","youtube","Post","React","memo","posts","comment","likeCount","maxLength15","maxLength","FormPost","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","MyPosts","profilePage","post","map","comm","like","key","id","myPost","formData","addPost","MyPostsContainer","dispatch","addPostActionCreator","Profile","ProfileContainer","userID","this","match","params","toString","history","push","getProfile","getProfileStatus","prevProps","prevState","snapshot","isAuth","Component","compose","auth","data","setUserProfile","setToggleFetchProfile","getProfileThunk","withRouter"],"mappings":"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","file":"static/js/4.d38a1c7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__3jAuU\",\"avaAndStatus\":\"ProfileInfo_avaAndStatus__3pKo8\",\"avatar\":\"ProfileInfo_avatar__3mscF\",\"contacts\":\"ProfileInfo_contacts__3NZT3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2oNNC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"MyPosts_text__1j8e_\",\"myPost\":\"MyPosts_myPost__3NavH\",\"btn\":\"MyPosts_btn__zGZFU\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype StatusStateToPropsType = {\r\n    status: string | null\r\n}\r\ntype StatusDispatchToPropsType = {\r\n    updateProfileStatus: (status: string) => void\r\n}\r\ntype ProfileStatusType = StatusStateToPropsType & StatusDispatchToPropsType\r\n\r\n\r\nconst ProfileStatus = (props: ProfileStatusType) => {\r\n\r\n    const [statusText, setStatusText] = useState(props.status)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setStatusText(props.status)\r\n    }, [props.status])\r\n\r\n    function activateEditMod() {\r\n        setEditMode(true)\r\n    }\r\n\r\n    function changeStatusText(e: ChangeEvent<HTMLInputElement>) {\r\n        setStatusText(e.currentTarget.value)\r\n    }\r\n\r\n    function addStatusText() {\r\n        if (statusText) {\r\n            props.updateProfileStatus(statusText)\r\n        }\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {editMode\r\n                    ? <input\r\n                        type=\"text\"\r\n                        value={statusText === null ? '' : statusText}\r\n                        autoFocus={true}\r\n                        onChange={changeStatusText}\r\n                        onBlur={addStatusText}\r\n                    />\r\n                    : <span onDoubleClick={activateEditMod} title={'status'}>\r\n                            {props.status === '' || props.status === null ? '---' : props.status}\r\n                        </span>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport item from '../../../common/layout/item.module.css'\r\nimport {updateProfileStatus, UserProfileType} from \"../../../store/profileReducer\";\r\nimport userIcon from '../../../assets/images/user img/fsociety-mask-549635.png'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\ntype ProfileStateToPropsType = {\r\n    profile: UserProfileType\r\n    isFetch: boolean\r\n    profileStatusText: string | null\r\n}\r\ntype ProfileDispatchTOPropsType = {\r\n    updateProfileStatus: (status: string) => void\r\n}\r\ntype profile = ProfileStateToPropsType & ProfileDispatchTOPropsType\r\n\r\nfunction ProfileInfo(props: profile) {\r\n    return (\r\n        <div className={s.profileBlock}>\r\n            {\r\n                props.isFetch\r\n                    ? <Preloader/>\r\n                    : <div className={`${s.descriptionBlock} ${item.itemCase}`}>\r\n                        <div className={s.avaAndStatus}>\r\n                            <img className={s.avatar}\r\n                                  src={props.profile.photos.large === null ? userIcon : props.profile.photos.large}\r\n                                  alt=\"...\"/>\r\n\r\n                            <ProfileStatus status={props.profileStatusText}\r\n                                           updateProfileStatus={props.updateProfileStatus}/>\r\n\r\n                        </div>\r\n                        <div>\r\n                            <span>Full name: </span>{props.profile.fullName}\r\n                        </div>\r\n                        <div>\r\n                            <span>About me:</span> {props.profile.aboutMe === null ? \"...\" : props.profile.aboutMe}\r\n                        </div>\r\n                        <div className={s.jobBlock}>\r\n                            {props.profile.lookingForAJob\r\n                                ? <div><span>I`m looking for a job</span></div>\r\n                                : \"I have job\"}\r\n                            {props.profile.lookingForAJobDescription\r\n                            && <div>\r\n                                <span>Description: </span>{props.profile.lookingForAJobDescription}\r\n                            </div>}\r\n                        </div>\r\n                        <div className={s.contactsBlock}>\r\n                            <div className={s.contacts}>Contacts:</div>\r\n                            <div>{props.profile.contacts.facebook && ' facebook : ' + props.profile.contacts.facebook}</div>\r\n                            <div>{props.profile.contacts.instagram && ' instagram : ' + props.profile.contacts.instagram}</div>\r\n                            <div>{props.profile.contacts.github && ' GitHub : ' + props.profile.contacts.github}</div>\r\n                            <div>{props.profile.contacts.mainLink && ' main Link : ' + props.profile.contacts.mainLink}</div>\r\n                            <div>{props.profile.contacts.twitter && ' twitter : ' + props.profile.contacts.twitter}</div>\r\n                            <div>{props.profile.contacts.vk && ' vk : ' + props.profile.contacts.vk}</div>\r\n                            <div>{props.profile.contacts.website && ' website : ' + props.profile.contacts.website}</div>\r\n                            <div>{props.profile.contacts.youtube && ' youtube : ' + props.profile.contacts.youtube}</div>\r\n                        </div>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        isFetch: state.profile.isFetching,\r\n        profileStatusText: state.profile.profileStatusText\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{updateProfileStatus})(ProfileInfo)","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype CommentType = {\r\n    comment: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post = React.memo((props: CommentType) => {\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQtFl6_bcZtQuriN1f5RQsnNexOj2TlmhkaBw&usqp=CAU\"\r\n                    alt=\"\"/>\r\n                <span>{props.comment}</span>\r\n                <div>\r\n                    <span>Like's {props.likeCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {maxLength} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\nexport type FormPostType = {\r\n    post: string\r\n}\r\nconst maxLength15 = maxLength(15)\r\n\r\nconst TextareaPost: React.FC<InjectedFormProps<FormPostType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"post\"} placeholder={\"write...\"}\r\n                       validate={[maxLength15]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst FormPost = reduxForm<FormPostType>({form: \"post\"})(TextareaPost)\r\n\r\nexport default FormPost;","import {addPostActionCreator, ProfileType} from \"../../../store/profileReducer\";\r\nimport {DispatchType, StateType} from \"../../../store/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport FormPost, {FormPostType} from \"./TextareaPostForm\";\r\n\r\ntype MyPostPropsType = {\r\n    addPost: (post: string) => void\r\n    profilePage: ProfileType\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostPropsType) => {\r\n\r\n    //отмапил посты\r\n    let posts = props.profilePage.post.map(post => <Post comment={post.comm} likeCount={post.like} key={post.id}/>)\r\n\r\n    function onAddPost(formData: FormPostType) {\r\n        props.addPost(formData.post)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPost}>\r\n            <h3> My posts </h3>\r\n            <div>\r\n                <FormPost onSubmit={onAddPost}/>\r\n            </div>\r\n            {posts}\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nlet mapStateToProps = (state: StateType) =>{\r\n    return {\r\n        profilePage: state.profile\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: DispatchType) => {\r\n    return {\r\n        addPost: (post: string) => dispatch(addPostActionCreator(post)),\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./myPosts/MyPostsContainer\";\r\n\r\n\r\nfunction Profile() {\r\n    return (\r\n        <div>\r\n            <ProfileInfo />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {compose} from \"redux\"\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileStatus, getProfileThunk, setToggleFetchProfile,\r\n    setUserProfile, UserProfileType\r\n} from \"../../store/profileReducer\";\r\nimport {StateType} from \"../../store/redux-store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {RouteComponentProps} from \"react-router\";\r\n\r\ntype RouterType = RouteComponentProps<{ userID: string }>\r\ntype DispatchProfileType = {\r\n    setUserProfile: (profile: UserProfileType) => void\r\n    setToggleFetchProfile: (isFetch: boolean) => void\r\n    getProfile: (profileIdFromURL: string) => void\r\n    getProfileStatus: (userID: string) => void\r\n}\r\ntype StateProfileType = {\r\n    userID: number | null\r\n    isAuth: boolean\r\n}\r\ntype ProfilePropsType = DispatchProfileType & StateProfileType & RouterType\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    componentDidMount() {\r\n\r\n            //переменной присваиваем ID который будет в URL при нажати на аватарку пользователя(в User.tsx)\r\n            let userID = this.props.match.params.userID\r\n            if (!userID) {\r\n                userID = this.props.userID ? this.props.userID.toString() : '' //здесь мы передаём ID как строку, но приходят как integer(целое число).В URL всё строки(string)\r\n                if (!userID){\r\n                    this.props.history.push('/login')\r\n                }\r\n            }\r\n            //'thunk'\r\n            this.props.getProfile(userID)\r\n            this.props.getProfileStatus(userID)\r\n\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.isAuth !== this.props.isAuth) {\r\n            //переменной присваиваем ID который будет в URL при нажати на аватарку пользователя(в User.tsx)\r\n            let userID = this.props.match.params.userID\r\n            if (!userID) {//если не передаём никой id профиля, то хададим по умолчанию id\r\n                userID = this.props.userID ? this.props.userID.toString() : '' //здесь мы передаём ID как строку, но приходят как integer(целое число).В URL всё строки(string)\r\n            }\r\n            //'thunk'\r\n            this.props.getProfile(userID)\r\n            this.props.getProfileStatus(userID)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth)return <Redirect to={'/Login'}/> // если пользователь не залогинен, то перенаправит на страницу Login\r\n        return (\r\n            <div>\r\n                <Profile/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateType): StateProfileType => {\r\n    return {\r\n        // ID авторизованоего пользоваетля\r\n        userID: state.auth.data.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    setUserProfile,\r\n    setToggleFetchProfile,\r\n    getProfile: getProfileThunk,\r\n    getProfileStatus\r\n}), withRouter)(ProfileContainer)\r\n\r\n//as React.ComponentClass"],"sourceRoot":""}