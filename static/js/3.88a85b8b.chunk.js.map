{"version":3,"sources":["common/layout/BTN.module.scss","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/myPosts/Post/Post.module.scss","components/Profile/myPosts/MyPosts.module.scss","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/Contact.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/myPosts/Post/Post.tsx","components/Profile/myPosts/TextareaPostForm.tsx","components/Profile/myPosts/MyPostsContainer.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","status","statusText","setStatusText","editMode","setEditMode","useEffect","type","value","autoFocus","onChange","e","currentTarget","onBlur","updateProfileStatus","onDoubleClick","title","Contact","contactTitle","contactValue","style","paddingLeft","ProfileData","profile","showContacts","setShowContacts","btnValue","setBtnValue","fullName","aboutMe","className","s","jobBlock","lookingForAJob","lookingForAJobDescription","onClick","btn","contactsBlock","contacts","Object","keys","map","key","maxLength15","maxLength","maxLength30","maxLength50","ProfileForm","connect","state","handleSubmit","error","onSubmit","createField","Input","display","justifyContent","Textarea","formSummeryError","ProfileReduxForm","reduxForm","form","compose","isFetch","isFetching","profileStatusText","isAuth","auth","savePhoto","saveProfileChange","withRouter","editBtn","setEditBtn","inputFileRef","useRef","match","params","userID","profileBlock","Preloader2","descriptionBlock","item","itemCase","avaAndStatus","avatar","src","photos","large","userIcon","alt","current","click","cn","changeFileBtn","hiddenInput","ref","target","files","data","then","initialValues","to","Post","React","memo","posts","comment","likeCount","FormPost","Field","component","name","placeholder","validate","MyPosts","profilePage","post","comm","like","id","myPost","formData","addPost","MyPostsContainer","dispatch","addPostActionCreator","ProfileContainer","refreshProfile","toString","getProfile","getProfileStatus","this","prevProps","prevState","snapshot","Component","getProfileThunk"],"mappings":"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","file":"static/js/3.88a85b8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"BTN_btn__3oOco\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__23YcP\",\"avaAndStatus\":\"ProfileInfo_avaAndStatus__2VhLv\",\"avatar\":\"ProfileInfo_avatar__D3D9M\",\"hiddenInput\":\"ProfileInfo_hiddenInput__1QK4s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Lq19\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPost\":\"MyPosts_myPost__263G3\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype StatusStateToPropsType = {\r\n    status: string | null\r\n}\r\ntype StatusDispatchToPropsType = {\r\n    updateProfileStatus: (status: string) => void\r\n}\r\ntype ProfileStatusType = StatusStateToPropsType & StatusDispatchToPropsType\r\n\r\n\r\nconst ProfileStatus = (props: ProfileStatusType) => {\r\n\r\n    const [statusText, setStatusText] = useState(props.status)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setStatusText(props.status)\r\n    }, [props.status])\r\n\r\n    function activateEditMod() {\r\n        setEditMode(true)\r\n    }\r\n\r\n    function changeStatusText(e: ChangeEvent<HTMLInputElement>) {\r\n        setStatusText(e.currentTarget.value)\r\n    }\r\n\r\n    function addStatusText() {\r\n        if (statusText) {\r\n            props.updateProfileStatus(statusText)\r\n        }\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {editMode\r\n                    ? <input\r\n                        type=\"text\"\r\n                        value={statusText === null ? '' : statusText}\r\n                        autoFocus={true}\r\n                        onChange={changeStatusText}\r\n                        onBlur={addStatusText}\r\n                    />\r\n                    : <span onDoubleClick={activateEditMod} title={'status'}>\r\n                            {props.status === '' || props.status === null ? '---' : props.status}\r\n                        </span>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\n\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactType) => {\r\n    return (\r\n        <div style={{paddingLeft: '10px'}}>\r\n            <span>{contactTitle}: {contactValue ? contactValue : ''}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React, {useState} from \"react\"\r\nimport {UserProfileType} from \"../../../../store/profileReducer\";\r\nimport s from \"../ProfileData/ProfileData.module.scss\";\r\nimport Contact from \"./Contact\";\r\nimport btn from \"../../../../common/layout/BTN.module.scss\";\r\n\r\n\r\nconst ProfileData = (profile: UserProfileType) => {\r\n\r\n    const [showContacts, setShowContacts] = useState<boolean>(false)\r\n    const [btnValue, setBtnValue] = useState<'show contacts' | 'hide contacts'>('show contacts')\r\n\r\n    const showHideContacts = () => {\r\n        showContacts && setShowContacts(false)\r\n        !showContacts && setShowContacts(true)\r\n        btnValue === 'show contacts' && setBtnValue('hide contacts')\r\n        btnValue === 'hide contacts' && setBtnValue('show contacts')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>Full name: </span>{profile.fullName}\r\n            </div>\r\n            <div>\r\n                <span>About me:</span> {profile.aboutMe ? profile.aboutMe : \"...\"}\r\n            </div>\r\n            <div className={s.jobBlock}>\r\n                {profile.lookingForAJob\r\n                    ? <div><span>I`m looking for a job</span></div>\r\n                    : <span>I have job</span>}\r\n                {profile.lookingForAJobDescription && <div>\r\n                    <span>My skills : </span>{profile.lookingForAJobDescription}\r\n                </div>}\r\n            </div>\r\n            <button onClick={showHideContacts} className={btn.btn}>{btnValue}</button>\r\n            {showContacts && <div className={s.contactsBlock}>\r\n                <div className={s.contacts}>\r\n                    <span>Contacts:</span> {(Object.keys(profile.contacts) as Array<keyof typeof profile.contacts>).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                })}\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData","import React from \"react\"\r\nimport {createField, Input, Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength} from \"../../../../utils/validators/validators\";\r\nimport s from \"../ProfileData/ProfileData.module.scss\";\r\nimport style from \"../../../Login/Login.module.scss\"\r\nimport {UserProfileType} from \"../../../../store/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/redux-store\";\r\n\r\nconst maxLength15 = maxLength(15)\r\nconst maxLength30 = maxLength(30)\r\nconst maxLength50 = maxLength(50)\r\n\r\nexport type ProfileReduxFormType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    contacts: {\r\n        facebook: string\r\n        github: string\r\n        instagram: string\r\n        mainLink: string\r\n        twitter: string\r\n        vk: string\r\n        website: string\r\n        youtube: string\r\n    }\r\n}\r\ntype ProfileType = {\r\n    profile: UserProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileReduxFormType> & ProfileType> = ({\r\nhandleSubmit,error,profile,...props\r\n                                                                                          }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <span>Full name :</span>\r\n                {createField(Input, \"fullName\", \"full name\", maxLength15)}\r\n            </div>\r\n            <div>\r\n                <span>About me :</span>\r\n                {createField(Input, \"aboutMe\", \"about me\", maxLength30)}\r\n            </div>\r\n            <div style={{display: \"flex\", justifyContent: \"flex-start\"}}>\r\n                <span>looking for a job :</span>\r\n                {createField(Input, \"lookingForAJob\", \"\", maxLength30, \"checkbox\")}\r\n            </div>\r\n            <div>\r\n                <span>My professional skills :</span>\r\n                {createField(Textarea, \"lookingForAJobDescription\", \"my skills\", maxLength50)}\r\n            </div>\r\n            <div className={s.contacts}>\r\n                Contacts: {(Object.keys(profile.contacts) as Array<keyof typeof profile.contacts>).map(key => {\r\n                return <div key={key}>\r\n                    <b>{key} :</b> {createField(Input, `contacts.${key}`, key, maxLength50)}\r\n                </div>\r\n            })}\r\n            </div>\r\n            <div>\r\n                {error && <div className={style.formSummeryError}>\r\n                    {error}\r\n                </div>}\r\n                <button>save</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    profile: state.profile.profile\r\n})\r\n\r\nconst ProfileForm = connect(mapStateToProps)(ProfileDataForm)\r\n\r\nconst ProfileReduxForm = reduxForm<ProfileReduxFormType>({form: 'editProfile'})(ProfileForm)\r\nexport default ProfileReduxForm","import React, {ChangeEvent, useRef, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\";\r\nimport item from \"../../../common/layout/item.module.scss\"\r\nimport btn from \"../../../common/layout/BTN.module.scss\"\r\nimport {savePhoto, saveProfileChange, updateProfileStatus, UserProfileType} from \"../../../store/profileReducer\";\r\nimport userIcon from '../../../assets/images/user img/fsociety-mask-549635.png'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\"\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport {withRouter, Redirect} from \"react-router-dom\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {ProfileReduxFormType} from \"./ProfileData/ProfileDataForm\";\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport ProfileReduxForm from \"./ProfileData/ProfileDataForm\";\r\nimport Preloader2 from \"../../../common/Preloader/PreloaderWithStyle/Preloader2\";\r\nimport cn from \"classnames\"\r\n\r\n\r\ntype RouterType = RouteComponentProps<{ userID: string }>\r\ntype ProfileStateToPropsType = {\r\n    isAuth: boolean\r\n    profile: UserProfileType\r\n    isFetch: boolean\r\n    profileStatusText: string | null\r\n}\r\ntype ProfileDispatchTOPropsType = {\r\n    updateProfileStatus: (status: string) => void\r\n    savePhoto: (photo: object) => void\r\n    saveProfileChange: (data: ProfileReduxFormType) => Promise<void>\r\n}\r\ntype profile = ProfileStateToPropsType & ProfileDispatchTOPropsType & RouterType\r\n\r\n\r\nconst ProfileInfo = (props: profile) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [editBtn, setEditBtn] = useState<'edit' | 'cancel'>('edit')\r\n\r\n    const inputFileRef = useRef<HTMLInputElement>(null)\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onEditMode = () => {\r\n        !editMode && setEditMode(true)\r\n        editMode && setEditMode(false)\r\n        editBtn === 'edit' && setEditBtn('cancel')\r\n        editBtn === 'cancel' && setEditBtn('edit')\r\n    }\r\n\r\n    const onEditSubmit = (data: ProfileReduxFormType) => {\r\n        props.saveProfileChange(data).then( () => {\r\n            setEditMode(false)\r\n            setEditBtn('edit')\r\n        })\r\n    }\r\n\r\n    if (!props.match.params.userID && !props.isAuth) return <Redirect to={'/login'} />\r\n    return (\r\n        <div className={s.profileBlock}>\r\n            {\r\n                props.isFetch\r\n                    ? <Preloader2/>\r\n                    : <div className={`${s.descriptionBlock} ${item.itemCase}`}>\r\n                        <div className={s.avaAndStatus}>\r\n                            <img className={s.avatar} src={props.profile.photos.large || userIcon} alt=''/>\r\n                            <ProfileStatus status={props.profileStatusText}\r\n                                           updateProfileStatus={props.updateProfileStatus}\r\n                            />\r\n                        </div>\r\n                        {!props.match.params.userID && props.isAuth &&\r\n                    <button onClick={ () => inputFileRef && inputFileRef.current && inputFileRef.current.click()} className={cn(btn.btn, s.changeFileBtn)}>change photo...</button>\r\n                        }\r\n                        {!props.match.params.userID && props.isAuth && <input className={s.hiddenInput} ref={inputFileRef} type='file' onChange={onMainPhotoSelected}/>}\r\n                        {!props.match.params.userID && props.isAuth &&  <div>\r\n                            <button onClick={onEditMode} className={btn.btn}>{editBtn}</button>\r\n                        </div>}\r\n\r\n                        {editMode\r\n                            ? <ProfileReduxForm onSubmit={onEditSubmit} initialValues={props.profile}/>\r\n                            : <ProfileData {...props.profile}/>}\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        isFetch: state.profile.isFetching,\r\n        profileStatusText: state.profile.profileStatusText,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n    {updateProfileStatus, savePhoto, saveProfileChange}), withRouter)(ProfileInfo)\r\n","import React from \"react\";\r\nimport s from './Post.module.scss'\r\n\r\ntype CommentType = {\r\n    comment: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post = React.memo((props: CommentType) => {\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQtFl6_bcZtQuriN1f5RQsnNexOj2TlmhkaBw&usqp=CAU\"\r\n                    alt=\"\"/>\r\n                <span>{props.comment}</span>\r\n                <div>\r\n                    <span>Like's {props.likeCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {maxLength} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport s from \"../../../common/layout/BTN.module.scss\"\r\n\r\n\r\nexport type FormPostType = {\r\n    post: string\r\n}\r\nconst maxLength15 = maxLength(15)\r\n\r\nconst TextareaPost: React.FC<InjectedFormProps<FormPostType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"post\"} placeholder={\"write...\"}\r\n                       validate={[maxLength15]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.btn}>add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst FormPost = reduxForm<FormPostType>({form: \"post\"})(TextareaPost)\r\n\r\nexport default FormPost;","import {addPostActionCreator, ProfileType} from \"../../../store/profileReducer\";\r\nimport {DispatchType, StateType} from \"../../../store/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport FormPost, {FormPostType} from \"./TextareaPostForm\";\r\n\r\ntype MyPostPropsType = {\r\n    addPost: (post: string) => void\r\n    profilePage: ProfileType\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostPropsType) => {\r\n\r\n    //отмапил посты\r\n    let posts = props.profilePage.post.map(post => <Post comment={post.comm} likeCount={post.like} key={post.id}/>)\r\n\r\n    function onAddPost(formData: FormPostType) {\r\n        props.addPost(formData.post)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPost}>\r\n            <h3> My posts </h3>\r\n            <div>\r\n                <FormPost onSubmit={onAddPost}/>\r\n            </div>\r\n            {posts}\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nlet mapStateToProps = (state: StateType) =>{\r\n    return {\r\n        profilePage: state.profile\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: DispatchType) => {\r\n    return {\r\n        addPost: (post: string) => dispatch(addPostActionCreator(post)),\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport {compose} from \"redux\"\r\nimport {connect} from \"react-redux\";\r\nimport {getProfileStatus, getProfileThunk} from \"../../store/profileReducer\";\r\nimport {StateType} from \"../../store/redux-store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./myPosts/MyPostsContainer\";\r\n\r\n\r\n\r\ntype RouterType = RouteComponentProps<{ userID: string }>\r\ntype DispatchProfileType = {\r\n    getProfile: (profileIdFromURL: string) => void\r\n    getProfileStatus: (userID: string) => void\r\n}\r\ntype StateProfileType = {\r\n    userID: number | null\r\n    isAuth: boolean\r\n}\r\ntype ProfilePropsType = DispatchProfileType & StateProfileType & RouterType\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    refreshProfile = () => {\r\n\r\n        let userID = this.props.match.params.userID\r\n        if (!userID) {              //если не передаём никакой id профиля\r\n            userID = this.props.userID ? this.props.userID.toString() : ''\r\n        }\r\n        this.props.getProfile(userID)\r\n        this.props.getProfileStatus(userID)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.isAuth !== this.props.isAuth || prevProps.match.params.userID !== this.props.match.params.userID) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth)return <Redirect to={'/Login'}/> // если пользователь не залогинен, то перенаправит на страницу Login\r\n        return (\r\n            <div>\r\n                <ProfileInfo />\r\n                <MyPostsContainer/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateType): StateProfileType => {\r\n    return {\r\n        userID: state.auth.data.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    getProfile: getProfileThunk,\r\n    getProfileStatus\r\n}), withRouter)(ProfileContainer)\r\n\r\n//as React.ComponentClass"],"sourceRoot":""}