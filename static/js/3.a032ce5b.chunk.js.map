{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/hoc/withAuthRedirect.tsx","components/Dialogs/TextareaDialogsForm.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialog","activeClassName","active","to","id","name","Message","mess","text","mapStateToProps","state","isAuth","auth","maxLength15","maxLength","TextareaDialogsForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","Dialogs","dialogsPage","dialogsBlock","containerMess","dialogsItems","map","user","key","messages","messTextBlock","message","formData","onSendFormMess","compose","connect","dialogs","dispatch","addMessActionCreator","Component","ContainerComponent","this","React"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,aAAe,8BAA8B,cAAgB,+BAA+B,aAAe,8BAA8B,SAAW,0BAA0B,cAAgB,+BAA+B,cAAgB,+BAA+B,cAAgB,iC,oBCA9SD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,OAAS,6B,oBCA/DD,EAAOC,QAAU,CAAC,KAAO,wB,wKCkBVC,MATf,SAAoBC,GAEhB,OACI,yBAAKC,UAAWC,IAAEC,QACd,kBAAC,IAAD,CAASC,gBAAiBF,IAAEG,OAAQC,GAAI,WAAaN,EAAMO,IAA3D,IAAiEP,EAAMQ,KAAvE,O,kBCDGC,MAJf,SAAiBT,GACb,OAAO,yBAAKC,UAAWC,IAAEQ,MAAlB,IAA0BV,EAAMW,KAAhC,M,wCCLPC,EAAkB,SAACC,GAAD,MAAuB,CACzCC,OAAQD,EAAME,KAAKD,S,iCCGjBE,EAAcC,YAAU,IAmBfC,EAFaC,YAA4B,CAACC,KAAM,UAAnCD,EAf0C,SAACnB,GACnE,OACI,0BAAMqB,SAAUrB,EAAMsB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUjB,KAAM,SAAUkB,YAAa,WAClDC,SAAU,CAACX,MAGtB,6BACI,6CCaT,SAASY,EAAQ5B,GAMpB,IAAI6B,EAAc7B,EAAM6B,YAGxB,OACI,yBAAK5B,UAAWC,IAAE4B,cACd,yBAAK7B,UAAWC,IAAE6B,eACd,yBAAK9B,UAAWC,IAAE8B,cACbH,EAAY1B,OAAO8B,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAYC,IAAKD,EAAK3B,GAAIC,KAAM0B,EAAK1B,KAAMD,GAAI2B,EAAK3B,SAExF,yBAAKN,UAAWC,IAAEkC,UACd,yBAAKnC,UAAWC,IAAEmC,eACbR,EAAYnB,KAAKuB,KAAI,SAAAvB,GAAI,OAAI,kBAAC,EAAD,CAASyB,IAAKzB,EAAKH,GAAII,KAAMD,EAAK4B,cAEpE,6BACI,wCACA,kBAAC,EAAD,CAAqBjB,SAnBzC,SAAmBkB,GACfvC,EAAMwC,eAAeD,EAASpC,eAwCvBsC,sBAAQC,aAdD,SAAC7B,GACnB,MAAO,CACHgB,YAAahB,EAAM8B,YAGF,SAACC,GACtB,MAAO,CACHJ,eAAgB,SAAC9B,GACbkC,EAASC,YAAqBnC,UF7DV,SAACoC,GAAoB,IAC3CC,EAD0C,uKAGxC,OAAKC,KAAKhD,MAAMc,OAEZ,kBAACgC,EAAcE,KAAKhD,OAFO,kBAAC,IAAD,CAAUM,GAAI,eAHL,GACf2C,IAAMH,WAUvC,OADqCJ,YAAQ9B,EAAR8B,CAAyBK,KEyDnDN,CAAwEb","file":"static/js/3.a032ce5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsBlock\":\"Dialogs_dialogsBlock__KeK4E\",\"containerMess\":\"Dialogs_containerMess__3w0mP\",\"dialogsItems\":\"Dialogs_dialogsItems__3KcfZ\",\"messages\":\"Dialogs_messages__FywMe\",\"messTextBlock\":\"Dialogs_messTextBlock__2zjbc\",\"sendMessBlock\":\"Dialogs_sendMessBlock__Y-2dM\",\"textAreaBlock\":\"Dialogs_textAreaBlock__8D900\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__MeO-K\",\"active\":\"DialogItem_active__18w_D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mess\":\"Message_mess__3tbWX\"};","import React from \"react\";\r\nimport s from \"./DialogItem.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype DialogType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\n//имена, кто написал  в сообщениях\r\nfunction DialogItem(props: DialogType) {\r\n    // let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink activeClassName={s.active} to={\"/dialog/\" + props.id}> {props.name} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Message.module.css\";\r\n\r\n\r\ntype MessageType = {\r\n    text: string\r\n}\r\n\r\n//сообщения в Messages\r\nfunction Message(props: MessageType) {\r\n    return <div className={s.mess}> {props.text} </div>\r\n}\r\n\r\nexport default Message;","import React from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateType} from \"../../store/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state: StateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n// export const withAuthRedirect = (Component: React.ComponentType) => {\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class ContainerComponent extends React.Component<any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return (\r\n                <Component {...this.props} />\r\n            )\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(ContainerComponent)\r\n    return (ConnectedAuthRedirectComponent)\r\n}","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {maxLength} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type TextareaFormType = {\r\n    dialog: string\r\n}\r\n\r\nconst maxLength15 = maxLength(15)\r\n\r\nconst TextareaDialog: React.FC<InjectedFormProps<TextareaFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"dialog\"} placeholder={\"write...\"}\r\n                       validate={[maxLength15]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst TextareaDialogsForm = reduxForm<TextareaFormType>({form: 'dialog'})(TextareaDialog)\r\n\r\nexport default TextareaDialogsForm;","import { addMessActionCreator} from \"../../store/dialogsReducer\";\r\nimport {DispatchType, StateType} from \"../../store/redux-store\";\r\nimport {compose} from \"redux\"\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport  {TextareaFormType} from \"./TextareaDialogsForm\";\r\nimport TextareaDialogsForm from \"./TextareaDialogsForm\";\r\n\r\ntype DialogsDataType = {\r\n    id: string\r\n    name: string\r\n}\r\ntype MessageDataType = {\r\n    id: string\r\n    message: string\r\n}\r\ntype DialogsPageType = {\r\n    dialog: Array<DialogsDataType>\r\n    mess: Array<MessageDataType>\r\n    newMessText: string\r\n}\r\ntype DialogsStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\ntype DialogsDispatchToPropsType = {\r\n    onSendFormMess: (mess: string) => void\r\n}\r\ntype DialogsPropsType = DialogsDispatchToPropsType & DialogsStatePropsType\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n\r\n    function onSubmit (formData: TextareaFormType) {\r\n        props.onSendFormMess(formData.dialog)\r\n    }\r\n\r\n    let dialogsPage = props.dialogsPage\r\n\r\n\r\n    return (\r\n        <div className={s.dialogsBlock}>\r\n            <div className={s.containerMess}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsPage.dialog.map(user => <DialogItem key={user.id} name={user.name} id={user.id}/>)}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    <div className={s.messTextBlock}>\r\n                        {dialogsPage.mess.map(mess => <Message key={mess.id} text={mess.message}/>)}\r\n                    </div>\r\n                    <div>\r\n                        <h3>messages</h3>\r\n                        <TextareaDialogsForm onSubmit={onSubmit}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogsPage: state.dialogs\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: DispatchType) => {\r\n    return {\r\n        onSendFormMess: (mess: string) => {\r\n            dispatch(addMessActionCreator(mess))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs) as React.ComponentClass\r\n"],"sourceRoot":""}